import { Http, Headers } from '@angular/http';
import { Response } from '@angular/http';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import { Configuration } from '../configuration';
export declare class InteractiveViewsApi {
    protected http: Http;
    configuration: Configuration;
    defaultHeaders: Headers;
    constructor(http: Http, configuration: Configuration);
    authDirectoryDirectoryIdGet(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    authOrganizationOrganizationIdDirectoryDirectoryIdGet(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    authOrganizationOrganizationIdProviderProviderIdGet(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    authProviderProviderIdGet(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    emailsVerifyGet(email: string, code: string, extraHttpRequestParams?: any): Observable<{}>;
    loginDirectoryDirectoryIdGet(sbClientId: string, directoryId: string, randomState: string, randomState2?: string, extraHttpRequestParams?: any): Observable<{}>;
    loginGet(sbClientId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}>;
    loginOrganizationOrganizationIdDirectoryDirectoryIdGet(sbClientId: string, organizationId: string, directoryId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}>;
    loginOrganizationOrganizationIdGet(sbClientId: string, organizationId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}>;
    loginOrganizationOrganizationIdProviderProviderIdGet(sbClientId: string, organizationId: string, providerId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}>;
    passwordResetCallbackGet(error: string, extraHttpRequestParams?: any): Observable<{}>;
    passwordResetGet(accountId: string, code: string, extraHttpRequestParams?: any): Observable<{}>;
    signupDirectoryDirectoryIdGet(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    signupGet(sbClientId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    signupOrganizationOrganizationIdDirectoryDirectoryIdGet(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    signupOrganizationOrganizationIdGet(sbClientId: string, organizationId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    signupOrganizationOrganizationIdProviderProviderIdGet(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    signupProviderProviderIdGet(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}>;
    authDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    authOrganizationOrganizationIdDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    authOrganizationOrganizationIdProviderProviderIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    authProviderProviderIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, sbClientSecret?: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    emailsVerifyGetWithHttpInfo(email: string, code: string, extraHttpRequestParams?: any): Observable<Response>;
    loginDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, randomState2?: string, extraHttpRequestParams?: any): Observable<Response>;
    loginGetWithHttpInfo(sbClientId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response>;
    loginOrganizationOrganizationIdDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, organizationId: string, directoryId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response>;
    loginOrganizationOrganizationIdGetWithHttpInfo(sbClientId: string, organizationId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response>;
    loginOrganizationOrganizationIdProviderProviderIdGetWithHttpInfo(sbClientId: string, organizationId: string, providerId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response>;
    passwordResetCallbackGetWithHttpInfo(error: string, extraHttpRequestParams?: any): Observable<Response>;
    passwordResetGetWithHttpInfo(accountId: string, code: string, extraHttpRequestParams?: any): Observable<Response>;
    signupDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    signupGetWithHttpInfo(sbClientId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    signupOrganizationOrganizationIdDirectoryDirectoryIdGetWithHttpInfo(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    signupOrganizationOrganizationIdGetWithHttpInfo(sbClientId: string, organizationId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    signupOrganizationOrganizationIdProviderProviderIdGetWithHttpInfo(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
    signupProviderProviderIdGetWithHttpInfo(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response>;
}
