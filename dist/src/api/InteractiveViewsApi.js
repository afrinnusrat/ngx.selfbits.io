/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var InteractiveViewsApi = (function () {
    function InteractiveViewsApi(http, configuration) {
        this.http = http;
        this.configuration = new configuration_1.Configuration();
        this.defaultHeaders = new http_1.Headers();
        this.sbClientId = null;
        this.sbClientSecret = null;
        if (configuration) {
            this.configuration = configuration;
            this.sbClientId = this.configuration.sbClientId;
            this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new http_1.Headers({ 'Authorization': this.configuration.apiKey });
        }
    }
    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication providers for a specific directory. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByDirectory = function (sbClientId, directoryId, randomState, invite, extraHttpRequestParams) {
        return this.openAuthViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user authentication using specific organization and directory
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByOrganizationAndDirectory = function (sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams) {
        return this.openAuthViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user authentication using specific organization and a specific provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param providerId the target provider
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByOrganizationAndProvider = function (sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams) {
        return this.openAuthViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param providerId the provider of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByProvider = function (sbClientId, providerId, randomState, invite, extraHttpRequestParams) {
        return this.openAuthViewByProviderWithHttpInfo(sbClientId, providerId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Verify email
     * Verify email
     * @param email Email you want to verifiy
     * @param code Code that was generated for the email verification
     */
    InteractiveViewsApi.prototype.openEmailVerificationViewByEmailAndCode = function (email, code, extraHttpRequestParams) {
        return this.openEmailVerificationViewByEmailAndCodeWithHttpInfo(email, code, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user login with default directory
     * Interactive user login with default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginView = function (sbClientId, randomState, extraHttpRequestParams) {
        return this.openLoginViewWithHttpInfo(sbClientId, randomState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user login with specific directory
     * Interactive user login with specific directory
     * @param sbClientId Your application client id
     * @param directoryId the directory where the user wants to log in
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByDirectory = function (sbClientId, directoryId, randomState, extraHttpRequestParams) {
        return this.openLoginViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user login with default organization and its default directory
     * Interactive user login with specific organization
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganization = function (sbClientId, organizationId, randomState, extraHttpRequestParams) {
        return this.openLoginViewByOrganizationWithHttpInfo(sbClientId, organizationId, randomState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user login with specific organization and a specific directory
     * Interactive user login with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganizationAndDirectory = function (sbClientId, organizationId, directoryId, randomState, extraHttpRequestParams) {
        return this.openLoginViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user login with specific organization and specific provider
     * Interactive user login with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganizationAndProvider = function (sbClientId, organizationId, providerId, randomState, extraHttpRequestParams) {
        return this.openLoginViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Reset password callback view
     * Reset password callback view
     * @param error Password reset error message
     */
    InteractiveViewsApi.prototype.openPasswordResetCallbackView = function (error, extraHttpRequestParams) {
        return this.openPasswordResetCallbackViewWithHttpInfo(error, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Reset password view
     * Reset password view
     * @param email Target email of a password reset
     * @param code Code that was generated for the password reset process
     */
    InteractiveViewsApi.prototype.openPasswordResetView = function (email, code, extraHttpRequestParams) {
        return this.openPasswordResetViewWithHttpInfo(email, code, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with default organization and its default directory
     * Interactive user signup with default organization and its default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupView = function (sbClientId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewWithHttpInfo(sbClientId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with a specific directory
     * Interactive user signup with default directory
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByDirectory = function (sbClientId, directoryId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with specified organization and its default directory
     * Interactive user signup with specified organization and its default directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganization = function (sbClientId, organizationId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewByOrganizationWithHttpInfo(sbClientId, organizationId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with specific organization and a specific directory
     * Interactive user signup with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganizationAndDirectory = function (sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with specific organization and specific provider
     * Interactive user signup with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganizationAndProvider = function (sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user signup with default organization and a directory depending on specified provider
     * Interactive user signup with default organization and a directory depending on specified provider
     * @param sbClientId Your application client id
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByProvider = function (sbClientId, providerId, randomState, invite, extraHttpRequestParams) {
        return this.openSignupViewByProviderWithHttpInfo(sbClientId, providerId, randomState, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication providers for a specific directory. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByDirectoryWithHttpInfo = function (sbClientId, directoryId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/auth/directory/${directoryId}'
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openAuthViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user authentication using specific organization and directory
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByOrganizationAndDirectoryWithHttpInfo = function (sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/auth/organization/${organizationId}/directory/${directoryId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user authentication using specific organization and a specific provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param providerId the target provider
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByOrganizationAndProviderWithHttpInfo = function (sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/auth/organization/${organizationId}/provider/${providerId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'providerId' + '}', String(providerId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param providerId the provider of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openAuthViewByProviderWithHttpInfo = function (sbClientId, providerId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/auth/provider/${providerId}'
            .replace('${' + 'providerId' + '}', String(providerId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openAuthViewByProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Verify email
     * Verify email
     * @param email Email you want to verifiy
     * @param code Code that was generated for the email verification
     */
    InteractiveViewsApi.prototype.openEmailVerificationViewByEmailAndCodeWithHttpInfo = function (email, code, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/emails/verify';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling openEmailVerificationViewByEmailAndCode.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling openEmailVerificationViewByEmailAndCode.');
        }
        if (email !== undefined) {
            queryParameters.set('email', email);
        }
        if (code !== undefined) {
            queryParameters.set('code', code);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user login with default directory
     * Interactive user login with default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewWithHttpInfo = function (sbClientId, randomState, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/login';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginView.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user login with specific directory
     * Interactive user login with specific directory
     * @param sbClientId Your application client id
     * @param directoryId the directory where the user wants to log in
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByDirectoryWithHttpInfo = function (sbClientId, directoryId, randomState, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/login/directory/${directoryId}'
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openLoginViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openLoginViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user login with default organization and its default directory
     * Interactive user login with specific organization
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganizationWithHttpInfo = function (sbClientId, organizationId, randomState, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/login/organization/${organizationId}'
            .replace('${' + 'organizationId' + '}', String(organizationId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganization.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user login with specific organization and a specific directory
     * Interactive user login with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganizationAndDirectoryWithHttpInfo = function (sbClientId, organizationId, directoryId, randomState, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/login/organization/${organizationId}/directory/${directoryId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user login with specific organization and specific provider
     * Interactive user login with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    InteractiveViewsApi.prototype.openLoginViewByOrganizationAndProviderWithHttpInfo = function (sbClientId, organizationId, providerId, randomState, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/login/organization/${organizationId}/provider/${providerId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'providerId' + '}', String(providerId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Reset password callback view
     * Reset password callback view
     * @param error Password reset error message
     */
    InteractiveViewsApi.prototype.openPasswordResetCallbackViewWithHttpInfo = function (error, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/password/reset/callback';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'error' is not null or undefined
        if (error === null || error === undefined) {
            throw new Error('Required parameter error was null or undefined when calling openPasswordResetCallbackView.');
        }
        if (error !== undefined) {
            queryParameters.set('error', error);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Reset password view
     * Reset password view
     * @param email Target email of a password reset
     * @param code Code that was generated for the password reset process
     */
    InteractiveViewsApi.prototype.openPasswordResetViewWithHttpInfo = function (email, code, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/password/reset';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling openPasswordResetView.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling openPasswordResetView.');
        }
        if (email !== undefined) {
            queryParameters.set('email', email);
        }
        if (code !== undefined) {
            queryParameters.set('code', code);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with default organization and its default directory
     * Interactive user signup with default organization and its default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewWithHttpInfo = function (sbClientId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupView.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupView.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with a specific directory
     * Interactive user signup with default directory
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByDirectoryWithHttpInfo = function (sbClientId, directoryId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup/directory/${directoryId}'
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openSignupViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with specified organization and its default directory
     * Interactive user signup with specified organization and its default directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganizationWithHttpInfo = function (sbClientId, organizationId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup/organization/${organizationId}'
            .replace('${' + 'organizationId' + '}', String(organizationId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganization.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganization.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with specific organization and a specific directory
     * Interactive user signup with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganizationAndDirectoryWithHttpInfo = function (sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup/organization/${organizationId}/directory/${directoryId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with specific organization and specific provider
     * Interactive user signup with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByOrganizationAndProviderWithHttpInfo = function (sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup/organization/${organizationId}/provider/${providerId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'providerId' + '}', String(providerId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Interactive user signup with default organization and a directory depending on specified provider
     * Interactive user signup with default organization and a directory depending on specified provider
     * @param sbClientId Your application client id
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    InteractiveViewsApi.prototype.openSignupViewByProviderWithHttpInfo = function (sbClientId, providerId, randomState, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/signup/provider/${providerId}'
            .replace('${' + 'providerId' + '}', String(providerId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openSignupViewByProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', sbClientId);
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', randomState);
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'text/html'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return InteractiveViewsApi;
}());
InteractiveViewsApi.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
InteractiveViewsApi.ctorParameters = function () { return [
    { type: http_1.Http, },
    { type: configuration_1.Configuration, decorators: [{ type: core_1.Optional },] },
]; };
exports.InteractiveViewsApi = InteractiveViewsApi;
//# sourceMappingURL=InteractiveViewsApi.js.map