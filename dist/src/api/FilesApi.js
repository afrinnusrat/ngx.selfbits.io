/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var FilesApi = (function () {
    function FilesApi(http, configuration) {
        this.http = http;
        this.configuration = new configuration_1.Configuration();
        this.defaultHeaders = new http_1.Headers();
        this.sbClientId = null;
        this.sbClientSecret = null;
        if (configuration) {
            this.configuration = configuration;
            this.sbClientId = this.configuration.sbClientId;
            this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new http_1.Headers({ 'Authorization': this.configuration.apiKey });
        }
    }
    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. private/myfolder/)
     */
    FilesApi.prototype.browsePrivateByPath = function (filePath, extraHttpRequestParams) {
        return this.browsePrivateByPathWithHttpInfo(filePath, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. public/myfolder/)
     */
    FilesApi.prototype.browsePublicByPath = function (filePath, extraHttpRequestParams) {
        return this.browsePublicByPathWithHttpInfo(filePath, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param file Your new file
     */
    FilesApi.prototype.createPrivate = function (file, extraHttpRequestParams) {
        return this.createPrivateWithHttpInfo(file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param organizationId The target organization
     * @param file Your new file
     */
    FilesApi.prototype.createPrivateOrganizationFile = function (organizationId, file, extraHttpRequestParams) {
        return this.createPrivateOrganizationFileWithHttpInfo(organizationId, file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param file Your new file
     */
    FilesApi.prototype.createPublic = function (file, extraHttpRequestParams) {
        return this.createPublicWithHttpInfo(file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param organizationId The target organization
     * @param file Your new file
     */
    FilesApi.prototype.createPublicOrganizationFile = function (organizationId, file, extraHttpRequestParams) {
        return this.createPublicOrganizationFileWithHttpInfo(organizationId, file, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * delete existing file
     * delete existing file
     * @param fileId The file identifier
     */
    FilesApi.prototype.deleteOne = function (fileId, extraHttpRequestParams) {
        return this.deleteOneWithHttpInfo(fileId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * query files
     * Query files and receive paginated result set
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    FilesApi.prototype.query = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        return this.queryWithHttpInfo(pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Read existing file by id or by filePath
     * Get the metadata of an existing file by id or by filePath
     * @param fileId The file identifier
     * @param filePath The filePath
     */
    FilesApi.prototype.readOne = function (fileId, filePath, extraHttpRequestParams) {
        return this.readOneWithHttpInfo(fileId, filePath, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Update customData of an existing file
     * Update customData of an existing file
     * @param fileId The user identifier
     * @param updatedFile updated file
     */
    FilesApi.prototype.updateOne = function (fileId, updatedFile, extraHttpRequestParams) {
        return this.updateOneWithHttpInfo(fileId, updatedFile, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    FilesApi.prototype.verifyUpload = function (fileId, etagObject, extraHttpRequestParams) {
        return this.verifyUploadWithHttpInfo(fileId, etagObject, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param organizationId The target organization
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    FilesApi.prototype.verifyUploadOfOrganizationFile = function (organizationId, fileId, etagObject, extraHttpRequestParams) {
        return this.verifyUploadOfOrganizationFileWithHttpInfo(organizationId, fileId, etagObject, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. private/myfolder/)
     */
    FilesApi.prototype.browsePrivateByPathWithHttpInfo = function (filePath, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/browse/private';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filePath' is not null or undefined
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling browsePrivateByPath.');
        }
        if (filePath !== undefined) {
            queryParameters.set('filePath', filePath);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. public/myfolder/)
     */
    FilesApi.prototype.browsePublicByPathWithHttpInfo = function (filePath, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/browse/public';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filePath' is not null or undefined
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling browsePublicByPath.');
        }
        if (filePath !== undefined) {
            queryParameters.set('filePath', filePath);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param file Your new file
     */
    FilesApi.prototype.createPrivateWithHttpInfo = function (file, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/private';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param organizationId The target organization
     * @param file Your new file
     */
    FilesApi.prototype.createPrivateOrganizationFileWithHttpInfo = function (organizationId, file, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/organization/${organizationId}/files/private'
            .replace('${' + 'organizationId' + '}', String(organizationId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling createPrivateOrganizationFile.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param file Your new file
     */
    FilesApi.prototype.createPublicWithHttpInfo = function (file, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/public';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param organizationId The target organization
     * @param file Your new file
     */
    FilesApi.prototype.createPublicOrganizationFileWithHttpInfo = function (organizationId, file, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/organization/${organizationId}/files/public'
            .replace('${' + 'organizationId' + '}', String(organizationId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling createPublicOrganizationFile.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * delete existing file
     * delete existing file
     * @param fileId The file identifier
     */
    FilesApi.prototype.deleteOneWithHttpInfo = function (fileId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/${fileId}'
            .replace('${' + 'fileId' + '}', String(fileId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling deleteOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * query files
     * Query files and receive paginated result set
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    FilesApi.prototype.queryWithHttpInfo = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', pageSize);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', pageNumber);
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', sort);
        }
        if (select !== undefined) {
            queryParameters.set('select', select);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Read existing file by id or by filePath
     * Get the metadata of an existing file by id or by filePath
     * @param fileId The file identifier
     * @param filePath The filePath
     */
    FilesApi.prototype.readOneWithHttpInfo = function (fileId, filePath, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/file';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (fileId !== undefined) {
            queryParameters.set('fileId', fileId);
        }
        if (filePath !== undefined) {
            queryParameters.set('filePath', filePath);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Update customData of an existing file
     * Update customData of an existing file
     * @param fileId The user identifier
     * @param updatedFile updated file
     */
    FilesApi.prototype.updateOneWithHttpInfo = function (fileId, updatedFile, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/${fileId}'
            .replace('${' + 'fileId' + '}', String(fileId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling updateOne.');
        }
        // verify required parameter 'updatedFile' is not null or undefined
        if (updatedFile === null || updatedFile === undefined) {
            throw new Error('Required parameter updatedFile was null or undefined when calling updateOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: updatedFile == null ? '' : JSON.stringify(updatedFile),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    FilesApi.prototype.verifyUploadWithHttpInfo = function (fileId, etagObject, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/files/${fileId}/verify'
            .replace('${' + 'fileId' + '}', String(fileId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling verifyUpload.');
        }
        // verify required parameter 'etagObject' is not null or undefined
        if (etagObject === null || etagObject === undefined) {
            throw new Error('Required parameter etagObject was null or undefined when calling verifyUpload.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: etagObject == null ? '' : JSON.stringify(etagObject),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param organizationId The target organization
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    FilesApi.prototype.verifyUploadOfOrganizationFileWithHttpInfo = function (organizationId, fileId, etagObject, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/organization/${organizationId}/files/${fileId}/verify'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'fileId' + '}', String(fileId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling verifyUploadOfOrganizationFile.');
        }
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling verifyUploadOfOrganizationFile.');
        }
        // verify required parameter 'etagObject' is not null or undefined
        if (etagObject === null || etagObject === undefined) {
            throw new Error('Required parameter etagObject was null or undefined when calling verifyUploadOfOrganizationFile.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: etagObject == null ? '' : JSON.stringify(etagObject),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return FilesApi;
}());
FilesApi.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
FilesApi.ctorParameters = function () { return [
    { type: http_1.Http, },
    { type: configuration_1.Configuration, decorators: [{ type: core_1.Optional },] },
]; };
exports.FilesApi = FilesApi;
//# sourceMappingURL=FilesApi.js.map