/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var MongodbAdminApi = (function () {
    function MongodbAdminApi(http, configuration) {
        this.http = http;
        this.configuration = new configuration_1.Configuration();
        this.defaultHeaders = new http_1.Headers();
        this.sbClientId = null;
        this.sbClientSecret = null;
        if (configuration) {
            this.configuration = configuration;
            this.sbClientId = this.configuration.sbClientId;
            this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new http_1.Headers({ 'Authorization': this.configuration.apiKey });
        }
    }
    /**
     * Create multiple new data items
     * Create multiple new data items
     * @param mongoModelId The mongo_model identifier
     * @param mongoDataItems Multiple data items
     */
    MongodbAdminApi.prototype.dataCreateManyByModel = function (mongoModelId, mongoDataItems, extraHttpRequestParams) {
        return this.dataCreateManyByModelWithHttpInfo(mongoModelId, mongoDataItems, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create new data item
     * Create new data item
     * @param mongoModelId The mongo_model identifier
     * @param mongoDataItem new data item
     */
    MongodbAdminApi.prototype.dataCreateOneByModel = function (mongoModelId, mongoDataItem, extraHttpRequestParams) {
        return this.dataCreateOneByModelWithHttpInfo(mongoModelId, mongoDataItem, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk delete existing data items
     * Bulk delete existing data items
     * @param mongoModelId The mongo_model identifier
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.dataDeleteManyByModel = function (mongoModelId, filter, extraHttpRequestParams) {
        return this.dataDeleteManyByModelWithHttpInfo(mongoModelId, filter, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * delete existing data item
     * delete existing data item
     * @param mongoModelId The model identifier
     * @param id The data item identifier
     */
    MongodbAdminApi.prototype.dataDeleteOneByModel = function (mongoModelId, id, extraHttpRequestParams) {
        return this.dataDeleteOneByModelWithHttpInfo(mongoModelId, id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Returns data items paginated
     * Returns data items paginated
     * @param mongoModelId The mongo_model identifier
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.dataQueryByModel = function (mongoModelId, pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        return this.dataQueryByModelWithHttpInfo(mongoModelId, pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get one existing data item
     * Get one existing data item
     * @param mongoModelId The mongo_model identifier
     * @param id The data item identifier
     */
    MongodbAdminApi.prototype.dataReadOneByModel = function (mongoModelId, id, extraHttpRequestParams) {
        return this.dataReadOneByModelWithHttpInfo(mongoModelId, id, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk update existing data items
     * Bulk update existing data items
     * @param mongoModelId The mongo_model identifier
     * @param filter Mongoose filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoDataBulkUpdate Use filter to find the data items and do a bulk update
     */
    MongodbAdminApi.prototype.dataUpdateManyByModel = function (mongoModelId, filter, mongoDataBulkUpdate, extraHttpRequestParams) {
        return this.dataUpdateManyByModelWithHttpInfo(mongoModelId, filter, mongoDataBulkUpdate, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * update existing data item
     * update existing data item
     * @param mongoModelId The mongo_model identifier
     * @param id The data item identifier
     * @param updatedMongoData updated mongo_data
     */
    MongodbAdminApi.prototype.dataUpdateOneByModel = function (mongoModelId, id, updatedMongoData, extraHttpRequestParams) {
        return this.dataUpdateOneByModelWithHttpInfo(mongoModelId, id, updatedMongoData, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create multiple new mongo_databases
     * Create multiple new mongo_databases
     * @param mongoDatabases Multiple mongo_databases
     */
    MongodbAdminApi.prototype.mongoDatabasesCreateMany = function (mongoDatabases, extraHttpRequestParams) {
        return this.mongoDatabasesCreateManyWithHttpInfo(mongoDatabases, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create new mongo_database
     * Create new mongo_database
     * @param mongoDatabase Your new mongo_database
     */
    MongodbAdminApi.prototype.mongoDatabasesCreateOne = function (mongoDatabase, extraHttpRequestParams) {
        return this.mongoDatabasesCreateOneWithHttpInfo(mongoDatabase, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk delete existing mongo_databases
     * Bulk delete existing mongo_databases
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.mongoDatabasesDeleteMany = function (filter, extraHttpRequestParams) {
        return this.mongoDatabasesDeleteManyWithHttpInfo(filter, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * delete existing mongo_database
     * delete existing mongo_database
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesDeleteOne = function (mongoDatabaseId, extraHttpRequestParams) {
        return this.mongoDatabasesDeleteOneWithHttpInfo(mongoDatabaseId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Returns mongo_databases
     * Returns mongo_databases
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.mongoDatabasesQuery = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        return this.mongoDatabasesQueryWithHttpInfo(pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get one existing mongo_database
     * Get one existing mongo_database
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesReadOne = function (mongoDatabaseId, extraHttpRequestParams) {
        return this.mongoDatabasesReadOneWithHttpInfo(mongoDatabaseId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Test connection. If the connection attempt fails, information is provided in the payload with status code 200.
     * Test connection. If the connection attempt fails, information is provided in the payload with status code 200.
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesTestOne = function (mongoDatabaseId, extraHttpRequestParams) {
        return this.mongoDatabasesTestOneWithHttpInfo(mongoDatabaseId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk update existing mongo_databases
     * Bulk update existing mongo_databases
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoDatabaseBulkUpdate Use filter to find the mongo_databases and do a bulk update
     */
    MongodbAdminApi.prototype.mongoDatabasesUpdateMany = function (filter, mongoDatabaseBulkUpdate, extraHttpRequestParams) {
        return this.mongoDatabasesUpdateManyWithHttpInfo(filter, mongoDatabaseBulkUpdate, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * update existing mongo_database
     * update existing mongo_database
     * @param mongoDatabaseId The mongo database identifier
     * @param updatedMongoDatabase updated mongo_database
     */
    MongodbAdminApi.prototype.mongoDatabasesUpdateOne = function (mongoDatabaseId, updatedMongoDatabase, extraHttpRequestParams) {
        return this.mongoDatabasesUpdateOneWithHttpInfo(mongoDatabaseId, updatedMongoDatabase, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create multiple new mongo_models
     * Create multiple new mongo_models
     * @param mongoModels Multiple mongo_models
     */
    MongodbAdminApi.prototype.mongoModelsCreateMany = function (mongoModels, extraHttpRequestParams) {
        return this.mongoModelsCreateManyWithHttpInfo(mongoModels, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create new mongo_model
     * Create new mongo_model
     * @param mongoModel Your new mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsCreateOne = function (mongoModel, extraHttpRequestParams) {
        return this.mongoModelsCreateOneWithHttpInfo(mongoModel, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk delete existing mongo_models
     * Bulk delete existing mongo_models
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.mongoModelsDeleteMany = function (filter, extraHttpRequestParams) {
        return this.mongoModelsDeleteManyWithHttpInfo(filter, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * delete existing mongo_model
     * delete existing mongo_model
     * @param mongoModelId The mongo_model identifier
     */
    MongodbAdminApi.prototype.mongoModelsDeleteOne = function (mongoModelId, extraHttpRequestParams) {
        return this.mongoModelsDeleteOneWithHttpInfo(mongoModelId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Returns mongo_models
     * Returns mongo_models
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.mongoModelsQuery = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        return this.mongoModelsQueryWithHttpInfo(pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Get one existing mongo_model
     * Get one existing mongo_model
     * @param mongoModelId The mongo_model identifier
     */
    MongodbAdminApi.prototype.mongoModelsReadOne = function (mongoModelId, extraHttpRequestParams) {
        return this.mongoModelsReadOneWithHttpInfo(mongoModelId, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Bulk update existing mongo_models
     * Bulk update existing mongo_models
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoModelBulkUpdate Use filter to find the mongo_models and do a bulk update
     */
    MongodbAdminApi.prototype.mongoModelsUpdateMany = function (filter, mongoModelBulkUpdate, extraHttpRequestParams) {
        return this.mongoModelsUpdateManyWithHttpInfo(filter, mongoModelBulkUpdate, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * update existing mongo_model
     * update existing mongo_model
     * @param mongoModelId The mongo model identifier
     * @param updatedMongoModel updated mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsUpdateOne = function (mongoModelId, updatedMongoModel, extraHttpRequestParams) {
        return this.mongoModelsUpdateOneWithHttpInfo(mongoModelId, updatedMongoModel, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Validate a mongo model definition. If the validation fails, information is provided in the payload with status code 200.
     * Validate a mongo model definition. If the validation fails, information is provided in the payload with status code 200.
     * @param mongoModel The mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsValidateByDefinition = function (mongoModel, extraHttpRequestParams) {
        return this.mongoModelsValidateByDefinitionWithHttpInfo(mongoModel, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Create multiple new data items
     * Create multiple new data items
     * @param mongoModelId The mongo_model identifier
     * @param mongoDataItems Multiple data items
     */
    MongodbAdminApi.prototype.dataCreateManyByModelWithHttpInfo = function (mongoModelId, mongoDataItems, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data/bulk'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataCreateManyByModel.');
        }
        // verify required parameter 'mongoDataItems' is not null or undefined
        if (mongoDataItems === null || mongoDataItems === undefined) {
            throw new Error('Required parameter mongoDataItems was null or undefined when calling dataCreateManyByModel.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoDataItems == null ? '' : JSON.stringify(mongoDataItems),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create new data item
     * Create new data item
     * @param mongoModelId The mongo_model identifier
     * @param mongoDataItem new data item
     */
    MongodbAdminApi.prototype.dataCreateOneByModelWithHttpInfo = function (mongoModelId, mongoDataItem, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataCreateOneByModel.');
        }
        // verify required parameter 'mongoDataItem' is not null or undefined
        if (mongoDataItem === null || mongoDataItem === undefined) {
            throw new Error('Required parameter mongoDataItem was null or undefined when calling dataCreateOneByModel.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoDataItem == null ? '' : JSON.stringify(mongoDataItem),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk delete existing data items
     * Bulk delete existing data items
     * @param mongoModelId The mongo_model identifier
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.dataDeleteManyByModelWithHttpInfo = function (mongoModelId, filter, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataDeleteManyByModel.');
        }
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling dataDeleteManyByModel.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * delete existing data item
     * delete existing data item
     * @param mongoModelId The model identifier
     * @param id The data item identifier
     */
    MongodbAdminApi.prototype.dataDeleteOneByModelWithHttpInfo = function (mongoModelId, id, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data/${id}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId))
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataDeleteOneByModel.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataDeleteOneByModel.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Returns data items paginated
     * Returns data items paginated
     * @param mongoModelId The mongo_model identifier
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.dataQueryByModelWithHttpInfo = function (mongoModelId, pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataQueryByModel.');
        }
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', pageSize);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', pageNumber);
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', sort);
        }
        if (select !== undefined) {
            queryParameters.set('select', select);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get one existing data item
     * Get one existing data item
     * @param mongoModelId The mongo_model identifier
     * @param id The data item identifier
     */
    MongodbAdminApi.prototype.dataReadOneByModelWithHttpInfo = function (mongoModelId, id, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data/${id}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId))
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataReadOneByModel.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataReadOneByModel.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk update existing data items
     * Bulk update existing data items
     * @param mongoModelId The mongo_model identifier
     * @param filter Mongoose filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoDataBulkUpdate Use filter to find the data items and do a bulk update
     */
    MongodbAdminApi.prototype.dataUpdateManyByModelWithHttpInfo = function (mongoModelId, filter, mongoDataBulkUpdate, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataUpdateManyByModel.');
        }
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling dataUpdateManyByModel.');
        }
        // verify required parameter 'mongoDataBulkUpdate' is not null or undefined
        if (mongoDataBulkUpdate === null || mongoDataBulkUpdate === undefined) {
            throw new Error('Required parameter mongoDataBulkUpdate was null or undefined when calling dataUpdateManyByModel.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: mongoDataBulkUpdate == null ? '' : JSON.stringify(mongoDataBulkUpdate),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * update existing data item
     * update existing data item
     * @param mongoModelId The mongo_model identifier
     * @param id The data item identifier
     * @param updatedMongoData updated mongo_data
     */
    MongodbAdminApi.prototype.dataUpdateOneByModelWithHttpInfo = function (mongoModelId, id, updatedMongoData, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}/data/${id}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId))
            .replace('${' + 'id' + '}', String(id));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling dataUpdateOneByModel.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling dataUpdateOneByModel.');
        }
        // verify required parameter 'updatedMongoData' is not null or undefined
        if (updatedMongoData === null || updatedMongoData === undefined) {
            throw new Error('Required parameter updatedMongoData was null or undefined when calling dataUpdateOneByModel.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: updatedMongoData == null ? '' : JSON.stringify(updatedMongoData),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create multiple new mongo_databases
     * Create multiple new mongo_databases
     * @param mongoDatabases Multiple mongo_databases
     */
    MongodbAdminApi.prototype.mongoDatabasesCreateManyWithHttpInfo = function (mongoDatabases, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db/bulk';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoDatabases == null ? '' : JSON.stringify(mongoDatabases),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create new mongo_database
     * Create new mongo_database
     * @param mongoDatabase Your new mongo_database
     */
    MongodbAdminApi.prototype.mongoDatabasesCreateOneWithHttpInfo = function (mongoDatabase, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoDatabase == null ? '' : JSON.stringify(mongoDatabase),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk delete existing mongo_databases
     * Bulk delete existing mongo_databases
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.mongoDatabasesDeleteManyWithHttpInfo = function (filter, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling mongoDatabasesDeleteMany.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * delete existing mongo_database
     * delete existing mongo_database
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesDeleteOneWithHttpInfo = function (mongoDatabaseId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db/${mongoDatabaseId}'
            .replace('${' + 'mongoDatabaseId' + '}', String(mongoDatabaseId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoDatabaseId' is not null or undefined
        if (mongoDatabaseId === null || mongoDatabaseId === undefined) {
            throw new Error('Required parameter mongoDatabaseId was null or undefined when calling mongoDatabasesDeleteOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Returns mongo_databases
     * Returns mongo_databases
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.mongoDatabasesQueryWithHttpInfo = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', pageSize);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', pageNumber);
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', sort);
        }
        if (select !== undefined) {
            queryParameters.set('select', select);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get one existing mongo_database
     * Get one existing mongo_database
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesReadOneWithHttpInfo = function (mongoDatabaseId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db/${mongoDatabaseId}'
            .replace('${' + 'mongoDatabaseId' + '}', String(mongoDatabaseId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoDatabaseId' is not null or undefined
        if (mongoDatabaseId === null || mongoDatabaseId === undefined) {
            throw new Error('Required parameter mongoDatabaseId was null or undefined when calling mongoDatabasesReadOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Test connection. If the connection attempt fails, information is provided in the payload with status code 200.
     * Test connection. If the connection attempt fails, information is provided in the payload with status code 200.
     * @param mongoDatabaseId The mongo_database identifier
     */
    MongodbAdminApi.prototype.mongoDatabasesTestOneWithHttpInfo = function (mongoDatabaseId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db/${mongoDatabaseId}/test'
            .replace('${' + 'mongoDatabaseId' + '}', String(mongoDatabaseId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoDatabaseId' is not null or undefined
        if (mongoDatabaseId === null || mongoDatabaseId === undefined) {
            throw new Error('Required parameter mongoDatabaseId was null or undefined when calling mongoDatabasesTestOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk update existing mongo_databases
     * Bulk update existing mongo_databases
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoDatabaseBulkUpdate Use filter to find the mongo_databases and do a bulk update
     */
    MongodbAdminApi.prototype.mongoDatabasesUpdateManyWithHttpInfo = function (filter, mongoDatabaseBulkUpdate, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling mongoDatabasesUpdateMany.');
        }
        // verify required parameter 'mongoDatabaseBulkUpdate' is not null or undefined
        if (mongoDatabaseBulkUpdate === null || mongoDatabaseBulkUpdate === undefined) {
            throw new Error('Required parameter mongoDatabaseBulkUpdate was null or undefined when calling mongoDatabasesUpdateMany.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: mongoDatabaseBulkUpdate == null ? '' : JSON.stringify(mongoDatabaseBulkUpdate),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * update existing mongo_database
     * update existing mongo_database
     * @param mongoDatabaseId The mongo database identifier
     * @param updatedMongoDatabase updated mongo_database
     */
    MongodbAdminApi.prototype.mongoDatabasesUpdateOneWithHttpInfo = function (mongoDatabaseId, updatedMongoDatabase, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/db/${mongoDatabaseId}'
            .replace('${' + 'mongoDatabaseId' + '}', String(mongoDatabaseId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoDatabaseId' is not null or undefined
        if (mongoDatabaseId === null || mongoDatabaseId === undefined) {
            throw new Error('Required parameter mongoDatabaseId was null or undefined when calling mongoDatabasesUpdateOne.');
        }
        // verify required parameter 'updatedMongoDatabase' is not null or undefined
        if (updatedMongoDatabase === null || updatedMongoDatabase === undefined) {
            throw new Error('Required parameter updatedMongoDatabase was null or undefined when calling mongoDatabasesUpdateOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: updatedMongoDatabase == null ? '' : JSON.stringify(updatedMongoDatabase),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create multiple new mongo_models
     * Create multiple new mongo_models
     * @param mongoModels Multiple mongo_models
     */
    MongodbAdminApi.prototype.mongoModelsCreateManyWithHttpInfo = function (mongoModels, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/bulk';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoModels == null ? '' : JSON.stringify(mongoModels),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Create new mongo_model
     * Create new mongo_model
     * @param mongoModel Your new mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsCreateOneWithHttpInfo = function (mongoModel, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModel' is not null or undefined
        if (mongoModel === null || mongoModel === undefined) {
            throw new Error('Required parameter mongoModel was null or undefined when calling mongoModelsCreateOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoModel == null ? '' : JSON.stringify(mongoModel),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk delete existing mongo_models
     * Bulk delete existing mongo_models
     * @param filter Sequelize filter object like {\&quot;name\&quot;: { \&quot;$like\&quot; : \&quot;app%\&quot;}, \&quot;customData\&quot;: { \&quot;$contains\&quot;: {\&quot;key2\&quot; : \&quot;val2\&quot;}}}
     */
    MongodbAdminApi.prototype.mongoModelsDeleteManyWithHttpInfo = function (filter, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling mongoModelsDeleteMany.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * delete existing mongo_model
     * delete existing mongo_model
     * @param mongoModelId The mongo_model identifier
     */
    MongodbAdminApi.prototype.mongoModelsDeleteOneWithHttpInfo = function (mongoModelId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling mongoModelsDeleteOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Returns mongo_models
     * Returns mongo_models
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;somename\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    MongodbAdminApi.prototype.mongoModelsQueryWithHttpInfo = function (pageSize, pageNumber, filter, sort, select, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', pageSize);
        }
        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', pageNumber);
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        if (sort !== undefined) {
            queryParameters.set('sort', sort);
        }
        if (select !== undefined) {
            queryParameters.set('select', select);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Get one existing mongo_model
     * Get one existing mongo_model
     * @param mongoModelId The mongo_model identifier
     */
    MongodbAdminApi.prototype.mongoModelsReadOneWithHttpInfo = function (mongoModelId, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling mongoModelsReadOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Bulk update existing mongo_models
     * Bulk update existing mongo_models
     * @param filter Sequelize filter object like {\&quot;name\&quot;: \&quot;xyz\&quot;}
     * @param mongoModelBulkUpdate Use filter to find the mongo_models and do a bulk update
     */
    MongodbAdminApi.prototype.mongoModelsUpdateManyWithHttpInfo = function (filter, mongoModelBulkUpdate, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filter' is not null or undefined
        if (filter === null || filter === undefined) {
            throw new Error('Required parameter filter was null or undefined when calling mongoModelsUpdateMany.');
        }
        // verify required parameter 'mongoModelBulkUpdate' is not null or undefined
        if (mongoModelBulkUpdate === null || mongoModelBulkUpdate === undefined) {
            throw new Error('Required parameter mongoModelBulkUpdate was null or undefined when calling mongoModelsUpdateMany.');
        }
        if (filter !== undefined) {
            queryParameters.set('filter', filter);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: mongoModelBulkUpdate == null ? '' : JSON.stringify(mongoModelBulkUpdate),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * update existing mongo_model
     * update existing mongo_model
     * @param mongoModelId The mongo model identifier
     * @param updatedMongoModel updated mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsUpdateOneWithHttpInfo = function (mongoModelId, updatedMongoModel, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/${mongoModelId}'
            .replace('${' + 'mongoModelId' + '}', String(mongoModelId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModelId' is not null or undefined
        if (mongoModelId === null || mongoModelId === undefined) {
            throw new Error('Required parameter mongoModelId was null or undefined when calling mongoModelsUpdateOne.');
        }
        // verify required parameter 'updatedMongoModel' is not null or undefined
        if (updatedMongoModel === null || updatedMongoModel === undefined) {
            throw new Error('Required parameter updatedMongoModel was null or undefined when calling mongoModelsUpdateOne.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: updatedMongoModel == null ? '' : JSON.stringify(updatedMongoModel),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Validate a mongo model definition. If the validation fails, information is provided in the payload with status code 200.
     * Validate a mongo model definition. If the validation fails, information is provided in the payload with status code 200.
     * @param mongoModel The mongo_model
     */
    MongodbAdminApi.prototype.mongoModelsValidateByDefinitionWithHttpInfo = function (mongoModel, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/m/models/validate';
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'mongoModel' is not null or undefined
        if (mongoModel === null || mongoModel === undefined) {
            throw new Error('Required parameter mongoModel was null or undefined when calling mongoModelsValidateByDefinition.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: mongoModel == null ? '' : JSON.stringify(mongoModel),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return MongodbAdminApi;
}());
MongodbAdminApi.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
MongodbAdminApi.ctorParameters = function () { return [
    { type: http_1.Http, },
    { type: configuration_1.Configuration, decorators: [{ type: core_1.Optional },] },
]; };
exports.MongodbAdminApi = MongodbAdminApi;
//# sourceMappingURL=MongodbAdminApi.js.map