/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var RestApi = (function () {
    function RestApi(http, configuration) {
        this.http = http;
        this.configuration = new configuration_1.Configuration();
        this.defaultHeaders = new http_1.Headers();
        this.sbClientId = null;
        this.sbClientSecret = null;
        if (configuration) {
            this.configuration = configuration;
            this.sbClientId = this.configuration.sbClientId;
            this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new http_1.Headers({ 'Authorization': this.configuration.apiKey });
        }
    }
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     */
    RestApi.prototype._delete = function (stage, resource, extraHttpRequestParams) {
        return this._deleteWithHttpInfo(stage, resource, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     */
    RestApi.prototype.get = function (stage, resource, extraHttpRequestParams) {
        return this.getWithHttpInfo(stage, resource, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     * @param payload Execution payload
     */
    RestApi.prototype.post = function (stage, resource, payload, extraHttpRequestParams) {
        return this.postWithHttpInfo(stage, resource, payload, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     * @param payload Execution payload
     */
    RestApi.prototype.put = function (stage, resource, payload, extraHttpRequestParams) {
        return this.putWithHttpInfo(stage, resource, payload, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     */
    RestApi.prototype._deleteWithHttpInfo = function (stage, resource, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/rest/${stage}/${resource}'
            .replace('${' + 'stage' + '}', String(stage))
            .replace('${' + 'resource' + '}', String(resource));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'stage' is not null or undefined
        if (stage === null || stage === undefined) {
            throw new Error('Required parameter stage was null or undefined when calling _delete.');
        }
        // verify required parameter 'resource' is not null or undefined
        if (resource === null || resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling _delete.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     */
    RestApi.prototype.getWithHttpInfo = function (stage, resource, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/rest/${stage}/${resource}'
            .replace('${' + 'stage' + '}', String(stage))
            .replace('${' + 'resource' + '}', String(resource));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'stage' is not null or undefined
        if (stage === null || stage === undefined) {
            throw new Error('Required parameter stage was null or undefined when calling get.');
        }
        // verify required parameter 'resource' is not null or undefined
        if (resource === null || resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling get.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     * @param payload Execution payload
     */
    RestApi.prototype.postWithHttpInfo = function (stage, resource, payload, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/rest/${stage}/${resource}'
            .replace('${' + 'stage' + '}', String(stage))
            .replace('${' + 'resource' + '}', String(resource));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'stage' is not null or undefined
        if (stage === null || stage === undefined) {
            throw new Error('Required parameter stage was null or undefined when calling post.');
        }
        // verify required parameter 'resource' is not null or undefined
        if (resource === null || resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling post.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Execute a REST request to a deployed REST API
     * Execute a REST request to a deployed REST API
     * @param stage The stage identifier
     * @param resource The resource path
     * @param payload Execution payload
     */
    RestApi.prototype.putWithHttpInfo = function (stage, resource, payload, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/rest/${stage}/${resource}'
            .replace('${' + 'stage' + '}', String(stage))
            .replace('${' + 'resource' + '}', String(resource));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'stage' is not null or undefined
        if (stage === null || stage === undefined) {
            throw new Error('Required parameter stage was null or undefined when calling put.');
        }
        // verify required parameter 'resource' is not null or undefined
        if (resource === null || resource === undefined) {
            throw new Error('Required parameter resource was null or undefined when calling put.');
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Put,
            headers: headers,
            body: payload == null ? '' : JSON.stringify(payload),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return RestApi;
}());
RestApi.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
RestApi.ctorParameters = function () { return [
    { type: http_1.Http, },
    { type: configuration_1.Configuration, decorators: [{ type: core_1.Optional },] },
]; };
exports.RestApi = RestApi;
//# sourceMappingURL=RestApi.js.map