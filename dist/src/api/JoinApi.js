/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var http_1 = require("@angular/http");
var http_2 = require("@angular/http");
require("rxjs/add/operator/map");
var configuration_1 = require("../configuration");
/* tslint:disable:no-unused-variable member-ordering */
var JoinApi = (function () {
    function JoinApi(http, configuration) {
        this.http = http;
        this.configuration = new configuration_1.Configuration();
        this.defaultHeaders = new http_1.Headers();
        if (configuration) {
            this.configuration = configuration;
            this.defaultHeaders = new http_1.Headers({ 'Authorization': this.configuration.apiKey });
        }
    }
    /**
     * Join a specific organization
     * User join with specific organization. The login credentials will be copied from existing organization account credentials.
     * @param organizationId the organization of the new user
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganization = function (organizationId, invite, extraHttpRequestParams) {
        return this.joinOrganizationWithHttpInfo(organizationId, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Join with specific organization and a specific directory
     * User join with specific organization and a specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password |
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param userSignupRequest User signup request
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganizationByDirectory = function (organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams) {
        return this.joinOrganizationByDirectoryWithHttpInfo(organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Signup with specific organization and directory that belongs to a specific provider
     * User join with specific organization and a directory that belongs to a specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password |
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param userSignupRequest User signup request
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganizationByProvider = function (organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams) {
        return this.joinOrganizationByProviderWithHttpInfo(organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams)
            .map(function (response) {
            if (response.status === 204) {
                return undefined;
            }
            else {
                return response.json();
            }
        });
    };
    /**
     * Join a specific organization
     * User join with specific organization. The login credentials will be copied from existing organization account credentials.
     * @param organizationId the organization of the new user
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganizationWithHttpInfo = function (organizationId, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/join/organization/${organizationId}'
            .replace('${' + 'organizationId' + '}', String(organizationId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling joinOrganization.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Join with specific organization and a specific directory
     * User join with specific organization and a specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password |
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param userSignupRequest User signup request
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganizationByDirectoryWithHttpInfo = function (organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/join/organization/${organizationId}/directory/${directoryId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling joinOrganizationByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling joinOrganizationByDirectory.');
        }
        // verify required parameter 'userSignupRequest' is not null or undefined
        if (userSignupRequest === null || userSignupRequest === undefined) {
            throw new Error('Required parameter userSignupRequest was null or undefined when calling joinOrganizationByDirectory.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: userSignupRequest == null ? '' : JSON.stringify(userSignupRequest),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    /**
     * Signup with specific organization and directory that belongs to a specific provider
     * User join with specific organization and a directory that belongs to a specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password |
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param userSignupRequest User signup request
     * @param invite Optional invite code
     */
    JoinApi.prototype.joinOrganizationByProviderWithHttpInfo = function (organizationId, directoryId, userSignupRequest, invite, extraHttpRequestParams) {
        var path = this.configuration.basePath + '/join/organization/${organizationId}/provider/${providerId}'
            .replace('${' + 'organizationId' + '}', String(organizationId))
            .replace('${' + 'directoryId' + '}', String(directoryId));
        var queryParameters = new http_1.URLSearchParams();
        var headers = new http_1.Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling joinOrganizationByProvider.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling joinOrganizationByProvider.');
        }
        // verify required parameter 'userSignupRequest' is not null or undefined
        if (userSignupRequest === null || userSignupRequest === undefined) {
            throw new Error('Required parameter userSignupRequest was null or undefined when calling joinOrganizationByProvider.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', invite);
        }
        // to determine the Content-Type header
        var consumes = [];
        // to determine the Accept header
        var produces = [
            'application/json'
        ];
        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }
        headers.set('Content-Type', 'application/json');
        var requestOptions = new http_2.RequestOptions({
            method: http_2.RequestMethod.Post,
            headers: headers,
            body: userSignupRequest == null ? '' : JSON.stringify(userSignupRequest),
            search: queryParameters
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = Object.assign(requestOptions, extraHttpRequestParams);
        }
        return this.http.request(path, requestOptions);
    };
    return JoinApi;
}());
JoinApi.decorators = [
    { type: core_1.Injectable },
];
/** @nocollapse */
JoinApi.ctorParameters = function () { return [
    { type: http_1.Http, },
    { type: configuration_1.Configuration, decorators: [{ type: core_1.Optional },] },
]; };
exports.JoinApi = JoinApi;
//# sourceMappingURL=JoinApi.js.map