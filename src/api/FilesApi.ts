/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class FilesApi {
    public configuration: Configuration = new Configuration();
    public defaultHeaders: Headers = new Headers();

    constructor(protected http: Http, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
            this.defaultHeaders = new Headers({'Authorization': this.configuration.apiKey});
        }
    }

    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. public/myfolder/)
     */
    public browse(filePath: string, extraHttpRequestParams?: any): Observable<models.FileBrowserDocs> {
        return this.browseWithHttpInfo(filePath, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. private/myfolder/)
     */
    public browse_1(filePath: string, extraHttpRequestParams?: any): Observable<models.FileBrowserDocs> {
        return this.browse_1WithHttpInfo(filePath, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param file Your new file
     */
    public createPrivate(file?: models.NewFile, extraHttpRequestParams?: any): Observable<models.NewFileResponse> {
        return this.createPrivateWithHttpInfo(file, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param file Your new file
     */
    public createPublic(file?: models.NewFile, extraHttpRequestParams?: any): Observable<models.NewFileResponse> {
        return this.createPublicWithHttpInfo(file, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * delete existing file
     * delete existing file
     * @param fileId The file identifier
     */
    public deleteOne(fileId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deleteOneWithHttpInfo(fileId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * query files
     * Query files and receive paginated result set
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    public query(pageSize?: number, pageNumber?: number, filter?: string, sort?: string, select?: string, extraHttpRequestParams?: any): Observable<models.FilePage> {
        return this.queryWithHttpInfo(pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Read existing file by id or by filePath
     * Get the metadata of an existing file by id or by filePath
     * @param fileId The file identifier
     * @param filePath The filePath
     */
    public readOne(fileId?: string, filePath?: string, extraHttpRequestParams?: any): Observable<models.File> {
        return this.readOneWithHttpInfo(fileId, filePath, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update customData of an existing file
     * Update customData of an existing file
     * @param fileId The user identifier
     * @param updatedFile updated file
     */
    public updateOne(fileId: string, updatedFile: models.FileUpdate, extraHttpRequestParams?: any): Observable<models.File> {
        return this.updateOneWithHttpInfo(fileId, updatedFile, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    public verifyUpload(fileId: string, etagObject: models.FileVerificationRequest, extraHttpRequestParams?: any): Observable<models.File> {
        return this.verifyUploadWithHttpInfo(fileId, etagObject, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. public/myfolder/)
     */
    public browseWithHttpInfo(filePath: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/browse/public';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filePath' is not null or undefined
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling browse.');
        }
        if (filePath !== undefined) {
            queryParameters.set('filePath', <any>filePath);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * browse file path
     * browse file folder structure
     * @param filePath The path to the folder you want to browse (f.e. private/myfolder/)
     */
    public browse_1WithHttpInfo(filePath: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/browse/private';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filePath' is not null or undefined
        if (filePath === null || filePath === undefined) {
            throw new Error('Required parameter filePath was null or undefined when calling browse_1.');
        }
        if (filePath !== undefined) {
            queryParameters.set('filePath', <any>filePath);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * initialize private file upload
     * Initialize new private file upload
     * @param file Your new file
     */
    public createPrivateWithHttpInfo(file?: models.NewFile, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/private';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * initialize public file upload
     * Initialize new public file upload
     * @param file Your new file
     */
    public createPublicWithHttpInfo(file?: models.NewFile, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/public';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: file == null ? '' : JSON.stringify(file), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * delete existing file
     * delete existing file
     * @param fileId The file identifier
     */
    public deleteOneWithHttpInfo(fileId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/${fileId}'
                    .replace('${' + 'fileId' + '}', String(fileId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling deleteOne.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * query files
     * Query files and receive paginated result set
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    public queryWithHttpInfo(pageSize?: number, pageNumber?: number, filter?: string, sort?: string, select?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }

        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }

        if (filter !== undefined) {
            queryParameters.set('filter', <any>filter);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        if (select !== undefined) {
            queryParameters.set('select', <any>select);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Read existing file by id or by filePath
     * Get the metadata of an existing file by id or by filePath
     * @param fileId The file identifier
     * @param filePath The filePath
     */
    public readOneWithHttpInfo(fileId?: string, filePath?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/file';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (fileId !== undefined) {
            queryParameters.set('fileId', <any>fileId);
        }

        if (filePath !== undefined) {
            queryParameters.set('filePath', <any>filePath);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Update customData of an existing file
     * Update customData of an existing file
     * @param fileId The user identifier
     * @param updatedFile updated file
     */
    public updateOneWithHttpInfo(fileId: string, updatedFile: models.FileUpdate, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/${fileId}'
                    .replace('${' + 'fileId' + '}', String(fileId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling updateOne.');
        }
        // verify required parameter 'updatedFile' is not null or undefined
        if (updatedFile === null || updatedFile === undefined) {
            throw new Error('Required parameter updatedFile was null or undefined when calling updateOne.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: updatedFile == null ? '' : JSON.stringify(updatedFile), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * verify the successful file upload
     * verify the successful file upload using the ETag header value
     * @param fileId The target file you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    public verifyUploadWithHttpInfo(fileId: string, etagObject: models.FileVerificationRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/files/${fileId}/verify'
                    .replace('${' + 'fileId' + '}', String(fileId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'fileId' is not null or undefined
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling verifyUpload.');
        }
        // verify required parameter 'etagObject' is not null or undefined
        if (etagObject === null || etagObject === undefined) {
            throw new Error('Required parameter etagObject was null or undefined when calling verifyUpload.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: etagObject == null ? '' : JSON.stringify(etagObject), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
