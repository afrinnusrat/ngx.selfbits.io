/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AuthApi {
    public configuration: Configuration = new Configuration();
    public defaultHeaders: Headers = new Headers();
	public sbClientId: string = null;
	public sbClientSecret: string = null;

    constructor(protected http: Http, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
			this.sbClientId = this.configuration.sbClientId;
			this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new Headers({'Authorization': this.configuration.apiKey});
        }
    }

    /**
     * User login with default organization and directory
     * User login with default organization and directory
     * @param userLoginRequest User login request credentials
     */
    public login(userLoginRequest: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<models.UserLoginResponse> {
        return this.loginWithHttpInfo(userLoginRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User login with a specific organization and login provider
     * User login with specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username | password | 
     * @param directoryId the directory of the new user
     * @param userLoginRequest User login request
     */
    public loginByDirectory(directoryId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<models.UserLoginResponse> {
        return this.loginByDirectoryWithHttpInfo(directoryId, userLoginRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Social directory login with token
     * User login with social directory and serverside oauth flow. The attributes that are used as credentials to login the user depend on the directory type. 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public loginByDirectoryAndToken(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<models.UserLoginResponse> {
        return this.loginByDirectoryAndTokenWithHttpInfo(directoryId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User login with a specific organization and the default directory
     * User login with a specific organization and the default directory
     * @param organizationId the organization id of the login user
     * @param userLoginRequest User login request
     */
    public loginByOrganization(organizationId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<models.UserLoginResponse> {
        return this.loginByOrganizationWithHttpInfo(organizationId, userLoginRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * User login with a specific organization and login provider
     * User login with a specific organization and login provider
     * @param organizationId the organization id of the login user
     * @param providerId the provider id of the target directory
     * @param userLoginRequest User login request
     */
    public loginByOrganizationAndProvider(organizationId: string, providerId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<models.UserLoginResponse> {
        return this.loginByOrganizationAndProviderWithHttpInfo(organizationId, providerId, userLoginRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * password reset
     * reset the password of a user
     * @param resetPasswordRequest The password reset request
     */
    public resetPasswordRequest(resetPasswordRequest: models.ResetPasswordRequest, extraHttpRequestParams?: any): Observable<models.ResetPasswordResponse> {
        return this.resetPasswordRequestWithHttpInfo(resetPasswordRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * trigger password reset by email
     * request an email to reset a password of a user
     * @param sendPasswordResetEmailRequest verified email address of the user
     */
    public resetPasswordTriggerByEmail(sendPasswordResetEmailRequest: models.SendPasswordResetEmailRequest, extraHttpRequestParams?: any): Observable<models.SendPasswordResetEmailResponse> {
        return this.resetPasswordTriggerByEmailWithHttpInfo(sendPasswordResetEmailRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with default organization and its default directory
     * Signup with default organization and its default directory
     * @param profile New user&#39;s profile
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signup(profile: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupWithHttpInfo(profile, invite, returnCredentials, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with specific directory
     * User signup with specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param directoryId the directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByDirectory(directoryId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByDirectoryWithHttpInfo(directoryId, signupRequest, invite, returnCredentials, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with social directory using a token
     * User signup with social directory and serverside oauth flow. The attributes that are used as credentials to signup the user depend on the directory type: 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public signupByDirectoryAndToken(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByDirectoryAndTokenWithHttpInfo(directoryId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Interactive POST endpoint for a user signup with email/pw or username/pw directory. The attributes that are used as credentials to signup the user depend on the directory type 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public signupByDirectoryInteractive(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByDirectoryInteractiveWithHttpInfo(directoryId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with specific organization and its default directory
     * User signup with specific organization and its default directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByOrganization(organizationId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByOrganizationWithHttpInfo(organizationId, signupRequest, invite, returnCredentials, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with specific organization and a specific directory
     * User signup with specific organization and a specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByOrganizationAndDirectory(organizationId: string, directoryId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByOrganizationAndDirectoryWithHttpInfo(organizationId, directoryId, signupRequest, invite, returnCredentials, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with specific organization and directory that belongs to a specific provider
     * User signup with specific organization and a directory that belongs to a specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param providerId the target provider
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     * @param signupRequest User signup request
     */
    public signupByOrganizationAndProvider(organizationId: string, providerId: string, invite?: string, returnCredentials?: boolean, signupRequest?: models.UserSignupRequest, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByOrganizationAndProviderWithHttpInfo(organizationId, providerId, invite, returnCredentials, signupRequest, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Signup with default organization and a directory depending on the specified provider
     * User signup with the default organization and a directory that belongs to the specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param providerId the provider of a directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByProvider(providerId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<models.UserSignupResponse> {
        return this.signupByProviderWithHttpInfo(providerId, signupRequest, invite, returnCredentials, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * User login with default organization and directory
     * User login with default organization and directory
     * @param userLoginRequest User login request credentials
     */
    public loginWithHttpInfo(userLoginRequest: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling login.');
        }
        // verify required parameter 'userLoginRequest' is not null or undefined
        if (userLoginRequest === null || userLoginRequest === undefined) {
            throw new Error('Required parameter userLoginRequest was null or undefined when calling login.');
        }
        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userLoginRequest == null ? '' : JSON.stringify(userLoginRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * User login with a specific organization and login provider
     * User login with specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username | password | 
     * @param directoryId the directory of the new user
     * @param userLoginRequest User login request
     */
    public loginByDirectoryWithHttpInfo(directoryId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/directory/${directoryId}'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling loginByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling loginByDirectory.');
        }
        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userLoginRequest == null ? '' : JSON.stringify(userLoginRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Social directory login with token
     * User login with social directory and serverside oauth flow. The attributes that are used as credentials to login the user depend on the directory type. 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public loginByDirectoryAndTokenWithHttpInfo(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/directory/${directoryId}/token'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling loginByDirectoryAndToken.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling loginByDirectoryAndToken.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling loginByDirectoryAndToken.');
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * User login with a specific organization and the default directory
     * User login with a specific organization and the default directory
     * @param organizationId the organization id of the login user
     * @param userLoginRequest User login request
     */
    public loginByOrganizationWithHttpInfo(organizationId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/organization/${organizationId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling loginByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling loginByOrganization.');
        }
        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userLoginRequest == null ? '' : JSON.stringify(userLoginRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * User login with a specific organization and login provider
     * User login with a specific organization and login provider
     * @param organizationId the organization id of the login user
     * @param providerId the provider id of the target directory
     * @param userLoginRequest User login request
     */
    public loginByOrganizationAndProviderWithHttpInfo(organizationId: string, providerId: string, userLoginRequest?: models.UserLoginRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/organization/${organizationId}/provider/${providerId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling loginByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling loginByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling loginByOrganizationAndProvider.');
        }
        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: userLoginRequest == null ? '' : JSON.stringify(userLoginRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * password reset
     * reset the password of a user
     * @param resetPasswordRequest The password reset request
     */
    public resetPasswordRequestWithHttpInfo(resetPasswordRequest: models.ResetPasswordRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/password/reset';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'resetPasswordRequest' is not null or undefined
        if (resetPasswordRequest === null || resetPasswordRequest === undefined) {
            throw new Error('Required parameter resetPasswordRequest was null or undefined when calling resetPasswordRequest.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: resetPasswordRequest == null ? '' : JSON.stringify(resetPasswordRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * trigger password reset by email
     * request an email to reset a password of a user
     * @param sendPasswordResetEmailRequest verified email address of the user
     */
    public resetPasswordTriggerByEmailWithHttpInfo(sendPasswordResetEmailRequest: models.SendPasswordResetEmailRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/password/reset/trigger';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sendPasswordResetEmailRequest' is not null or undefined
        if (sendPasswordResetEmailRequest === null || sendPasswordResetEmailRequest === undefined) {
            throw new Error('Required parameter sendPasswordResetEmailRequest was null or undefined when calling resetPasswordTriggerByEmail.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: sendPasswordResetEmailRequest == null ? '' : JSON.stringify(sendPasswordResetEmailRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with default organization and its default directory
     * Signup with default organization and its default directory
     * @param profile New user&#39;s profile
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupWithHttpInfo(profile: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signup.');
        }
        // verify required parameter 'profile' is not null or undefined
        if (profile === null || profile === undefined) {
            throw new Error('Required parameter profile was null or undefined when calling signup.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: profile == null ? '' : JSON.stringify(profile), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with specific directory
     * User signup with specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param directoryId the directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByDirectoryWithHttpInfo(directoryId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/directory/${directoryId}'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling signupByDirectory.');
        }
        // verify required parameter 'signupRequest' is not null or undefined
        if (signupRequest === null || signupRequest === undefined) {
            throw new Error('Required parameter signupRequest was null or undefined when calling signupByDirectory.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: signupRequest == null ? '' : JSON.stringify(signupRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with social directory using a token
     * User signup with social directory and serverside oauth flow. The attributes that are used as credentials to signup the user depend on the directory type: 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public signupByDirectoryAndTokenWithHttpInfo(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/directory/${directoryId}/token'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByDirectoryAndToken.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling signupByDirectoryAndToken.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling signupByDirectoryAndToken.');
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Interactive POST endpoint for a user signup with email/pw or username/pw directory. The attributes that are used as credentials to signup the user depend on the directory type 
     * @param directoryId the directory of the new user
     * @param randomState random state that was provided in the interactive oauth flow
     */
    public signupByDirectoryInteractiveWithHttpInfo(directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/directory/${directoryId}/interactive'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByDirectoryInteractive.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling signupByDirectoryInteractive.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling signupByDirectoryInteractive.');
        }
        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with specific organization and its default directory
     * User signup with specific organization and its default directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByOrganizationWithHttpInfo(organizationId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling signupByOrganization.');
        }
        // verify required parameter 'signupRequest' is not null or undefined
        if (signupRequest === null || signupRequest === undefined) {
            throw new Error('Required parameter signupRequest was null or undefined when calling signupByOrganization.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: signupRequest == null ? '' : JSON.stringify(signupRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with specific organization and a specific directory
     * User signup with specific organization and a specific directory. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByOrganizationAndDirectoryWithHttpInfo(organizationId: string, directoryId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}/directory/${directoryId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling signupByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling signupByOrganizationAndDirectory.');
        }
        // verify required parameter 'signupRequest' is not null or undefined
        if (signupRequest === null || signupRequest === undefined) {
            throw new Error('Required parameter signupRequest was null or undefined when calling signupByOrganizationAndDirectory.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: signupRequest == null ? '' : JSON.stringify(signupRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with specific organization and directory that belongs to a specific provider
     * User signup with specific organization and a directory that belongs to a specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param organizationId the organization of the new user
     * @param providerId the target provider
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     * @param signupRequest User signup request
     */
    public signupByOrganizationAndProviderWithHttpInfo(organizationId: string, providerId: string, invite?: string, returnCredentials?: boolean, signupRequest?: models.UserSignupRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}/provider/${providerId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling signupByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling signupByOrganizationAndProvider.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: signupRequest == null ? '' : JSON.stringify(signupRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Signup with default organization and a directory depending on the specified provider
     * User signup with the default organization and a directory that belongs to the specific provider. The attributes that are used as credentials to login the user depend on the directory type:  | directoryType | accountId | accountPassword | |----------|----------|----------| | sbcloud | email | password | | anonymouscloud | username (random if empty) | password (random if empty) | | ldap | username | password | 
     * @param providerId the provider of a directory of the new user
     * @param signupRequest User signup request
     * @param invite Optional invite code
     * @param returnCredentials if true, return the credentials in the signup response
     */
    public signupByProviderWithHttpInfo(providerId: string, signupRequest: models.UserSignupRequest, invite?: string, returnCredentials?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/provider/${providerId}'
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (this.sbClientId === null || this.sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling signupByProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling signupByProvider.');
        }
        // verify required parameter 'signupRequest' is not null or undefined
        if (signupRequest === null || signupRequest === undefined) {
            throw new Error('Required parameter signupRequest was null or undefined when calling signupByProvider.');
        }
        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        if (returnCredentials !== undefined) {
            queryParameters.set('returnCredentials', <any>returnCredentials);
        }

        headers.set('sb-client-id', String(this.sbClientId));

        headers.set('sb-client-secret', String(this.sbClientSecret));

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: signupRequest == null ? '' : JSON.stringify(signupRequest), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
