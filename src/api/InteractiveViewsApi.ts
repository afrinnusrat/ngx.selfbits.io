/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class InteractiveViewsApi {
    public configuration: Configuration = new Configuration();
    public defaultHeaders: Headers = new Headers();
	public sbClientId: string = null;
	public sbClientSecret: string = null;

    constructor(protected http: Http, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
			this.sbClientId = this.configuration.sbClientId;
			this.sbClientSecret = this.configuration.sbClientSecret;
            this.defaultHeaders = new Headers({'Authorization': this.configuration.apiKey});
        }
    }

    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication providers for a specific directory. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByDirectory(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openAuthViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user authentication using specific organization and directory
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByOrganizationAndDirectory(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openAuthViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user authentication using specific organization and a specific provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param providerId the target provider
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByOrganizationAndProvider(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openAuthViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param providerId the provider of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByProvider(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openAuthViewByProviderWithHttpInfo(sbClientId, providerId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Verify email
     * Verify email
     * @param email Email you want to verifiy
     * @param code Code that was generated for the email verification
     */
    public openEmailVerificationViewByEmailAndCode(email: string, code: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openEmailVerificationViewByEmailAndCodeWithHttpInfo(email, code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user login with default directory
     * Interactive user login with default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginView(sbClientId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openLoginViewWithHttpInfo(sbClientId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user login with specific directory
     * Interactive user login with specific directory
     * @param sbClientId Your application client id
     * @param directoryId the directory where the user wants to log in
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByDirectory(sbClientId: string, directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openLoginViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user login with default organization and its default directory
     * Interactive user login with specific organization
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganization(sbClientId: string, organizationId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openLoginViewByOrganizationWithHttpInfo(sbClientId, organizationId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user login with specific organization and a specific directory
     * Interactive user login with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganizationAndDirectory(sbClientId: string, organizationId: string, directoryId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openLoginViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user login with specific organization and specific provider
     * Interactive user login with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganizationAndProvider(sbClientId: string, organizationId: string, providerId: string, randomState?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openLoginViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Reset password callback view
     * Reset password callback view
     * @param error Password reset error message
     */
    public openPasswordResetCallbackView(error: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openPasswordResetCallbackViewWithHttpInfo(error, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Reset password view
     * Reset password view
     * @param email Target email of a password reset
     * @param code Code that was generated for the password reset process
     */
    public openPasswordResetView(email: string, code: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openPasswordResetViewWithHttpInfo(email, code, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with default organization and its default directory
     * Interactive user signup with default organization and its default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupView(sbClientId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewWithHttpInfo(sbClientId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with a specific directory
     * Interactive user signup with default directory
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByDirectory(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewByDirectoryWithHttpInfo(sbClientId, directoryId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with specified organization and its default directory
     * Interactive user signup with specified organization and its default directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganization(sbClientId: string, organizationId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewByOrganizationWithHttpInfo(sbClientId, organizationId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with specific organization and a specific directory
     * Interactive user signup with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganizationAndDirectory(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewByOrganizationAndDirectoryWithHttpInfo(sbClientId, organizationId, directoryId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with specific organization and specific provider
     * Interactive user signup with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganizationAndProvider(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewByOrganizationAndProviderWithHttpInfo(sbClientId, organizationId, providerId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Interactive user signup with default organization and a directory depending on specified provider
     * Interactive user signup with default organization and a directory depending on specified provider
     * @param sbClientId Your application client id
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByProvider(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.openSignupViewByProviderWithHttpInfo(sbClientId, providerId, randomState, invite, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication providers for a specific directory. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByDirectoryWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/auth/directory/${directoryId}'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openAuthViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user authentication using specific organization and directory
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByOrganizationAndDirectoryWithHttpInfo(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/auth/organization/${organizationId}/directory/${directoryId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user authentication using specific organization and a specific provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param organizationId the target organization
     * @param providerId the target provider
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByOrganizationAndProviderWithHttpInfo(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/auth/organization/${organizationId}/provider/${providerId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user authentication with external provider
     * Interactive user authentication with external authentication provider. If the authentication is successful, the client is redirected to /auth/provider/[providerId]/callback.
     * @param sbClientId Your application client id
     * @param providerId the provider of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     * @param invite Optional invite code
     */
    public openAuthViewByProviderWithHttpInfo(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/auth/provider/${providerId}'
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openAuthViewByProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openAuthViewByProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openAuthViewByProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Verify email
     * Verify email
     * @param email Email you want to verifiy
     * @param code Code that was generated for the email verification
     */
    public openEmailVerificationViewByEmailAndCodeWithHttpInfo(email: string, code: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/emails/verify';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling openEmailVerificationViewByEmailAndCode.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling openEmailVerificationViewByEmailAndCode.');
        }
        if (email !== undefined) {
            queryParameters.set('email', <any>email);
        }

        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user login with default directory
     * Interactive user login with default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewWithHttpInfo(sbClientId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginView.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user login with specific directory
     * Interactive user login with specific directory
     * @param sbClientId Your application client id
     * @param directoryId the directory where the user wants to log in
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByDirectoryWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/directory/${directoryId}'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openLoginViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openLoginViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user login with default organization and its default directory
     * Interactive user login with specific organization
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganizationWithHttpInfo(sbClientId: string, organizationId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/organization/${organizationId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganization.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user login with specific organization and a specific directory
     * Interactive user login with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganizationAndDirectoryWithHttpInfo(sbClientId: string, organizationId: string, directoryId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/organization/${organizationId}/directory/${directoryId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openLoginViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user login with specific organization and specific provider
     * Interactive user login with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive authentication
     */
    public openLoginViewByOrganizationAndProviderWithHttpInfo(sbClientId: string, organizationId: string, providerId: string, randomState?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/login/organization/${organizationId}/provider/${providerId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openLoginViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reset password callback view
     * Reset password callback view
     * @param error Password reset error message
     */
    public openPasswordResetCallbackViewWithHttpInfo(error: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/password/reset/callback';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'error' is not null or undefined
        if (error === null || error === undefined) {
            throw new Error('Required parameter error was null or undefined when calling openPasswordResetCallbackView.');
        }
        if (error !== undefined) {
            queryParameters.set('error', <any>error);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Reset password view
     * Reset password view
     * @param email Target email of a password reset
     * @param code Code that was generated for the password reset process
     */
    public openPasswordResetViewWithHttpInfo(email: string, code: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/password/reset';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'email' is not null or undefined
        if (email === null || email === undefined) {
            throw new Error('Required parameter email was null or undefined when calling openPasswordResetView.');
        }
        // verify required parameter 'code' is not null or undefined
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling openPasswordResetView.');
        }
        if (email !== undefined) {
            queryParameters.set('email', <any>email);
        }

        if (code !== undefined) {
            queryParameters.set('code', <any>code);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with default organization and its default directory
     * Interactive user signup with default organization and its default directory
     * @param sbClientId Your application client id
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewWithHttpInfo(sbClientId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupView.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupView.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with a specific directory
     * Interactive user signup with default directory
     * @param sbClientId Your application client id
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByDirectoryWithHttpInfo(sbClientId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/directory/${directoryId}'
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openSignupViewByDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with specified organization and its default directory
     * Interactive user signup with specified organization and its default directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganizationWithHttpInfo(sbClientId: string, organizationId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganization.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganization.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganization.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with specific organization and a specific directory
     * Interactive user signup with specific organization and a specific directory
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param directoryId the directory of the new user
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganizationAndDirectoryWithHttpInfo(sbClientId: string, organizationId: string, directoryId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}/directory/${directoryId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'directoryId' + '}', String(directoryId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'directoryId' is not null or undefined
        if (directoryId === null || directoryId === undefined) {
            throw new Error('Required parameter directoryId was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganizationAndDirectory.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with specific organization and specific provider
     * Interactive user signup with specific organization and specific provider
     * @param sbClientId Your application client id
     * @param organizationId the organization of the new user
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByOrganizationAndProviderWithHttpInfo(sbClientId: string, organizationId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/organization/${organizationId}/provider/${providerId}'
                    .replace('${' + 'organizationId' + '}', String(organizationId))
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'organizationId' is not null or undefined
        if (organizationId === null || organizationId === undefined) {
            throw new Error('Required parameter organizationId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByOrganizationAndProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * Interactive user signup with default organization and a directory depending on specified provider
     * Interactive user signup with default organization and a directory depending on specified provider
     * @param sbClientId Your application client id
     * @param providerId the provider of the user directory
     * @param randomState Random string to identifiy the account after the successful interactive signup
     * @param invite Optional invite code
     */
    public openSignupViewByProviderWithHttpInfo(sbClientId: string, providerId: string, randomState: string, invite?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/signup/provider/${providerId}'
                    .replace('${' + 'providerId' + '}', String(providerId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'sbClientId' is not null or undefined
        if (sbClientId === null || sbClientId === undefined) {
            throw new Error('Required parameter sbClientId was null or undefined when calling openSignupViewByProvider.');
        }
        // verify required parameter 'providerId' is not null or undefined
        if (providerId === null || providerId === undefined) {
            throw new Error('Required parameter providerId was null or undefined when calling openSignupViewByProvider.');
        }
        // verify required parameter 'randomState' is not null or undefined
        if (randomState === null || randomState === undefined) {
            throw new Error('Required parameter randomState was null or undefined when calling openSignupViewByProvider.');
        }
        if (sbClientId !== undefined) {
            queryParameters.set('sb-client-id', <any>sbClientId);
        }

        if (randomState !== undefined) {
            queryParameters.set('randomState', <any>randomState);
        }

        if (invite !== undefined) {
            queryParameters.set('invite', <any>invite);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'text/html'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
