/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class TenantsApi {
    protected basePath = 'https://selfbits.apps.selfbits.io/api/v2/selfbits/apps/scp';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * Returns tenants of the logged in user
     */
    public tenantsGet(extraHttpRequestParams?: any): Observable<models.TenantCredentialArray> {
        return this.tenantsGetWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Create new SELFBITS CLOUD PLATFORM tenant by a valid subdomain
     * @param tenant Your new tenant
     */
    public tenantsPost(tenant: models.NewTenant, extraHttpRequestParams?: any): Observable<models.TenantCreateResponse> {
        return this.tenantsPostWithHttpInfo(tenant, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Delete existing SELFBITS CLOUD PLATFORM application
     * @param tenantId The tenant identifier
     * @param applicationId The tenant application identifier
     */
    public tenantsTenantIdApplicationsApplicationIdDelete(tenantId: string, applicationId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.tenantsTenantIdApplicationsApplicationIdDeleteWithHttpInfo(tenantId, applicationId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns tenant applications
     * @param tenantId Your Selfbits Tenant
     */
    public tenantsTenantIdApplicationsGet(tenantId: string, extraHttpRequestParams?: any): Observable<models.ApplicationArray> {
        return this.tenantsTenantIdApplicationsGetWithHttpInfo(tenantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Create new application
     * @param tenantId Your Selfbits Tenant ID
     * @param application Your new application
     */
    public tenantsTenantIdApplicationsPost(tenantId: string, application: models.NewApplication, extraHttpRequestParams?: any): Observable<models.Application> {
        return this.tenantsTenantIdApplicationsPostWithHttpInfo(tenantId, application, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Delete existing SELFBITS CLOUD PLATFORM tenant
     * @param tenantId The tenant identifier
     */
    public tenantsTenantIdDelete(tenantId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.tenantsTenantIdDeleteWithHttpInfo(tenantId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * Returns tenants of the logged in user
     */
    public tenantsGetWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Create new SELFBITS CLOUD PLATFORM tenant by a valid subdomain
     * @param tenant Your new tenant
     */
    public tenantsPostWithHttpInfo(tenant: models.NewTenant, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling tenantsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: tenant == null ? '' : JSON.stringify(tenant), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Delete existing SELFBITS CLOUD PLATFORM application
     * @param tenantId The tenant identifier
     * @param applicationId The tenant application identifier
     */
    public tenantsTenantIdApplicationsApplicationIdDeleteWithHttpInfo(tenantId: string, applicationId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants/${tenantId}/applications/${applicationId}'
                    .replace('${' + 'tenantId' + '}', String(tenantId))
                    .replace('${' + 'applicationId' + '}', String(applicationId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantId' is not null or undefined
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling tenantsTenantIdApplicationsApplicationIdDelete.');
        }
        // verify required parameter 'applicationId' is not null or undefined
        if (applicationId === null || applicationId === undefined) {
            throw new Error('Required parameter applicationId was null or undefined when calling tenantsTenantIdApplicationsApplicationIdDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns tenant applications
     * @param tenantId Your Selfbits Tenant
     */
    public tenantsTenantIdApplicationsGetWithHttpInfo(tenantId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants/${tenantId}/applications'
                    .replace('${' + 'tenantId' + '}', String(tenantId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantId' is not null or undefined
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling tenantsTenantIdApplicationsGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Create new application
     * @param tenantId Your Selfbits Tenant ID
     * @param application Your new application
     */
    public tenantsTenantIdApplicationsPostWithHttpInfo(tenantId: string, application: models.NewApplication, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants/${tenantId}/applications'
                    .replace('${' + 'tenantId' + '}', String(tenantId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantId' is not null or undefined
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling tenantsTenantIdApplicationsPost.');
        }
        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling tenantsTenantIdApplicationsPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: application == null ? '' : JSON.stringify(application), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Delete existing SELFBITS CLOUD PLATFORM tenant
     * @param tenantId The tenant identifier
     */
    public tenantsTenantIdDeleteWithHttpInfo(tenantId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/tenants/${tenantId}'
                    .replace('${' + 'tenantId' + '}', String(tenantId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'tenantId' is not null or undefined
        if (tenantId === null || tenantId === undefined) {
            throw new Error('Required parameter tenantId was null or undefined when calling tenantsTenantIdDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
