/**
 * Selfbits API V2
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import 'rxjs/add/operator/map';

import * as models                                           from '../model/models';
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class FilemetasApi {
    protected basePath = 'https://selfbits.apps.selfbits.io/api/v2/selfbits/apps/scp';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
        }
        if (configuration) {
            this.configuration = configuration;
        }
    }

    /**
     * 
     * delete existing filemeta
     * @param filemetaId The filemeta identifier
     */
    public filemetasFilemetaIdDelete(filemetaId: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.filemetasFilemetaIdDeleteWithHttpInfo(filemetaId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Get one existing filemeta
     * @param filemetaId The filemeta identifier
     */
    public filemetasFilemetaIdGet(filemetaId: string, extraHttpRequestParams?: any): Observable<models.Filemeta> {
        return this.filemetasFilemetaIdGetWithHttpInfo(filemetaId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * update existing filemeta
     * @param filemetaId The user identifier
     * @param updatedFilemeta updated filemeta
     */
    public filemetasFilemetaIdPut(filemetaId: string, updatedFilemeta: models.FilemetaUpdate, extraHttpRequestParams?: any): Observable<models.Filemeta> {
        return this.filemetasFilemetaIdPutWithHttpInfo(filemetaId, updatedFilemeta, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Verify uploaded filemeta by the received ETag
     * @param filemetaId The target filemeta you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    public filemetasFilemetaIdVerifyPost(filemetaId: string, etagObject: models.FilemetaVerificationRequest, extraHttpRequestParams?: any): Observable<models.Filemeta> {
        return this.filemetasFilemetaIdVerifyPostWithHttpInfo(filemetaId, etagObject, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns filemetas
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    public filemetasGet(pageSize?: number, pageNumber?: number, filter?: string, sort?: string, select?: string, extraHttpRequestParams?: any): Observable<models.FilemetaPage> {
        return this.filemetasGetWithHttpInfo(pageSize, pageNumber, filter, sort, select, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Create new filemeta
     * @param filemeta Your new filemeta
     */
    public filemetasPost(filemeta?: models.NewFilemeta, extraHttpRequestParams?: any): Observable<models.NewFilemetaResponse> {
        return this.filemetasPostWithHttpInfo(filemeta, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }


    /**
     * 
     * delete existing filemeta
     * @param filemetaId The filemeta identifier
     */
    public filemetasFilemetaIdDeleteWithHttpInfo(filemetaId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas/${filemetaId}'
                    .replace('${' + 'filemetaId' + '}', String(filemetaId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filemetaId' is not null or undefined
        if (filemetaId === null || filemetaId === undefined) {
            throw new Error('Required parameter filemetaId was null or undefined when calling filemetasFilemetaIdDelete.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get one existing filemeta
     * @param filemetaId The filemeta identifier
     */
    public filemetasFilemetaIdGetWithHttpInfo(filemetaId: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas/${filemetaId}'
                    .replace('${' + 'filemetaId' + '}', String(filemetaId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filemetaId' is not null or undefined
        if (filemetaId === null || filemetaId === undefined) {
            throw new Error('Required parameter filemetaId was null or undefined when calling filemetasFilemetaIdGet.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * update existing filemeta
     * @param filemetaId The user identifier
     * @param updatedFilemeta updated filemeta
     */
    public filemetasFilemetaIdPutWithHttpInfo(filemetaId: string, updatedFilemeta: models.FilemetaUpdate, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas/${filemetaId}'
                    .replace('${' + 'filemetaId' + '}', String(filemetaId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filemetaId' is not null or undefined
        if (filemetaId === null || filemetaId === undefined) {
            throw new Error('Required parameter filemetaId was null or undefined when calling filemetasFilemetaIdPut.');
        }
        // verify required parameter 'updatedFilemeta' is not null or undefined
        if (updatedFilemeta === null || updatedFilemeta === undefined) {
            throw new Error('Required parameter updatedFilemeta was null or undefined when calling filemetasFilemetaIdPut.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: updatedFilemeta == null ? '' : JSON.stringify(updatedFilemeta), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Verify uploaded filemeta by the received ETag
     * @param filemetaId The target filemeta you want to verify
     * @param etagObject The etag response header of the successful file upload
     */
    public filemetasFilemetaIdVerifyPostWithHttpInfo(filemetaId: string, etagObject: models.FilemetaVerificationRequest, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas/${filemetaId}/verify'
                    .replace('${' + 'filemetaId' + '}', String(filemetaId));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // verify required parameter 'filemetaId' is not null or undefined
        if (filemetaId === null || filemetaId === undefined) {
            throw new Error('Required parameter filemetaId was null or undefined when calling filemetasFilemetaIdVerifyPost.');
        }
        // verify required parameter 'etagObject' is not null or undefined
        if (etagObject === null || etagObject === undefined) {
            throw new Error('Required parameter etagObject was null or undefined when calling filemetasFilemetaIdVerifyPost.');
        }
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: etagObject == null ? '' : JSON.stringify(etagObject), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns filemetas
     * @param pageSize Items per page
     * @param pageNumber The page index (starting from 1)
     * @param filter Sequelize filter object like {\&quot;isPublic\&quot;: \&quot;true\&quot;}
     * @param sort Sort object (1&#x3D;ascending, -1&#x3D;descending) like {\&quot;createdAt\&quot;: -1 }
     * @param select Select object (1&#x3D;include, -1&#x3D;exclude) like {\&quot;Id\&quot;: 1, \&quot;name\&quot;: 1 }
     */
    public filemetasGetWithHttpInfo(pageSize?: number, pageNumber?: number, filter?: string, sort?: string, select?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }

        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }

        if (filter !== undefined) {
            queryParameters.set('filter', <any>filter);
        }

        if (sort !== undefined) {
            queryParameters.set('sort', <any>sort);
        }

        if (select !== undefined) {
            queryParameters.set('select', <any>select);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Create new filemeta
     * @param filemeta Your new filemeta
     */
    public filemetasPostWithHttpInfo(filemeta?: models.NewFilemeta, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.configuration.basePath + '/filemetas';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
        // to determine the Content-Type header
        let consumes: string[] = [
        ];

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (ConsumerSecurity) required
        if (this.configuration.apiKey) {
            headers.set('Authorization', this.configuration.apiKey);
        }

        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            body: filemeta == null ? '' : JSON.stringify(filemeta), // https://github.com/angular/angular/issues/10612
            search: queryParameters
        });

        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
